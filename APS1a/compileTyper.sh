#!/bin/bash

# üöÄ Script pour compiler et ex√©cuter automatiquement les fichiers avec typage Prolog
set -e  # Arr√™t en cas d'erreur

echo "üöÄ Compilation et g√©n√©ration des fichiers n√©cessaires..."

# Dossiers de sortie
output_dir="AST_RESULTAT"
typer_dir="TYPAGE_RESULTAT"
mkdir -p "$output_dir"
mkdir -p "$typer_dir"

# G√©n√©ration lexer et parser
ocamllex lexer.mll
if ! ocamlyacc parser.mly; then
    echo "‚ùå Erreur lors de la g√©n√©ration de parser.ml et parser.mli"
    exit 1
fi

# Compilation
ocamlc -c ast.ml
ocamlc -c parser.mli
ocamlc -c parser.ml
ocamlc -c lexer.ml
ocamlc -c prologterm.ml
ocamlc -c mainTyper.ml

# Linking
ocamlc -o mainTyper ast.cmo parser.cmo lexer.cmo prologterm.cmo mainTyper.cmo

echo "‚úÖ Compilation termin√©e avec succ√®s !"

# Fonction pour traiter un fichier .aps
process_file() {
    local file="$1"
    local filename=$(basename -- "$file")
    local base="${filename%.*}"
    local output_file="$output_dir/ast_${base}.txt"
    local typer_output_file="$typer_dir/typer_${base}.txt"

    echo "üìÑ Traitement du fichier : $file"
    echo ""

    # G√©n√©ration de l'AST (non affich√©e)
    ./mainTyper "$file" > "$output_file"

    echo "üîç Passage du contenu √† Prolog :"
    typage=$( (cat "$output_file"; echo ".") | swipl -s typer.pl -g main_stdin -t halt)

    # G√©n√©rer le message de typage
    result_message=""
    if [[ "$typage" == *"void"* ]]; then
        result_message="R√©sultat: ‚úÖ Bien typ√©"$'\n'"Typage termin√©e avec succ√®s."
    elif [[ "$typage" == *"type_error"* ]]; then
        result_message="R√©sultat: ‚ùå Erreur de typage !!!"$'\n'"Typage termin√©e avec √©chec."
    else
        result_message="R√©sultat inattendu : $typage"
    fi

    # Affichage + enregistrement dans TYPAGE_RESULTAT/typer_<nom>.txt
    echo "$result_message"
    echo "$result_message" > "$typer_output_file"

    echo ""
}

# Si des fichiers sont pass√©s en argument
if [ "$#" -gt 0 ]; then
    echo "üîç Ex√©cution des fichiers sp√©cifi√©s en argument..."
    for file in "$@"; do
        if [ -f "$file" ]; then
            process_file "$file"
        else
            echo "‚ö†Ô∏è Le fichier '$file' n'existe pas."
        fi
    done
else
    # Sinon, ex√©cuter tous les fichiers dans le dossier Samples/
    if [ ! -d "Samples" ]; then
        echo "‚ö†Ô∏è Le dossier 'Samples/' n'existe pas. Cr√©ez-le et ajoutez des fichiers .aps."
        exit 1
    fi

    echo "üîç Recherche des fichiers .aps dans le dossier Samples/..."
    found=0
    for file in Samples/*/*.aps; do
        if [ -f "$file" ]; then
            process_file "$file"
            found=1
        fi
    done

    if [ "$found" -eq 0 ]; then
        echo "‚ö†Ô∏è Aucun fichier .aps trouv√© dans Samples/"
    fi
fi
